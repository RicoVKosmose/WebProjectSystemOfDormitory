    const express = require("express");
    const mysql = require("mysql2");
    const cors = require("cors");
    const bodyParser = require("body-parser");
    const session = require("express-session");
    const multer = require("multer");
    const path = require("path");
    const fs = require("fs");
    const util = require('util');
    const bcrypt = require('bcrypt');


    const app = express();

    app.use(session({
        secret: "project322",
        resave: false,
        saveUninitialized: false,
        cookie: { secure: false, httpOnly: true }
    }));


    app.use(cors({ origin: "http://localhost:3000", credentials: true }));

    app.use(bodyParser.json());
    app.use(express.static("public"));
    app.use('/uploads', express.static(path.join(__dirname, 'public/uploads')));

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MySQL
    const db = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "2025",
        database: "db",
        port:3306
    });
    db.connect(err => {
        if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
        else console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MySQL!");
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer
    const storage = multer.diskStorage({
        destination: (req, file, cb) => cb(null, "public/uploads"),
        filename: (req, file, cb) => {
            const ext = path.extname(file.originalname);
            cb(null, `avatar-${Date.now()}${ext}`);
        }
    });
    const upload = multer({ storage });

    // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
    app.post('/api/logout', (req, res) => {
        req.session.destroy((err) => {
            if (err) {
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏' });
            }
            res.clearCookie('connect.sid'); // –£–¥–∞–ª—è–µ–º cookie —Å–µ—Å—Å–∏–∏
            res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
        });
    });


    // üîê –í—Ö–æ–¥
    app.post("/login", (req, res) => {
        const { login, password } = req.body;
        db.query("SELECT * FROM db.users WHERE Login = ?", [login], (err, results) => {
            if (err) return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            if (results.length === 0) return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            const user = results[0];
            if (user.password !== password) return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });

            req.session.userId = user.idUsers;
            res.json({ message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", role: user.role });
        });
    });

    // üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    app.get("/api/student-profile", (req, res) => {
        const userId = req.session.userId;
        if (!userId) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

        db.query("SELECT * FROM db.students WHERE user_id = ?", [userId], (err, results) => {
            if (err) return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞" });
            if (results.length === 0) return res.status(404).json({ error: "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

            res.json(results[0]);
        });
    });

    // üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
    app.post("/api/upload-avatar", upload.single("avatar"), (req, res) => {
        const userId = req.session.userId;
        if (!userId) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

        const filename = req.file.filename;

        db.query("UPDATE db.students SET avatar = ? WHERE user_id = ?", [filename, userId], (err) => {
            if (err) return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏" });
            res.json({ message: "–ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω", avatar: filename });
        });
    });

    const query = util.promisify(db.query).bind(db);
    app.get('/api/duty-photo', async (req, res) => {
        const userId = req.session.userId;

        if (!userId) return res.status(401).json({ error: 'Unauthorized' });

        try {
            const result = await query(
                'SELECT floor, flooredge FROM db.students WHERE user_id = ?',
                [userId]
            );

            if (result.length === 0) return res.status(404).json({ error: 'Student not found' });

            const { floor, flooredge } = result[0];
            const imagePath = `/uploads/duty/${flooredge}_${floor}.jpg`;

            res.json({ imagePath });

        } catch (err) {
            console.error(err);
            res.status(500).json({ error: 'Server error' });
        }
    });

    const dutyUpload = multer({ dest: "public/uploads/duty" }); // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º

    app.post("/api/upload-duty-photo", dutyUpload.single("image"), (req, res) => {
        const { fluredge, floor } = req.body;
        if (!req.file || !fluredge || !floor) {
            return res.status(400).json({ success: false, error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" });
        }

        const tempPath = req.file.path;
        const targetPath = path.join(__dirname, "public", "uploads", "duty", `${fluredge}_${floor}.jpg`);

        fs.rename(tempPath, targetPath, (err) => {
            if (err) {
                console.error(err);
                return res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞" });
            }

            res.json({ success: true });
        });
    });

    app.get("/api/duty-photos", (req, res) => {
        const dutyDir = path.join(__dirname, "public", "uploads", "duty");

        fs.readdir(dutyDir, (err, files) => {
            if (err) {
                console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ duty:", err);
                return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            }

            const photos = files
                .filter(name => name.endsWith(".jpg"))
                .map(name => {
                    const [fluredge, floorWithExt] = name.split("_");
                    const floor = floorWithExt.replace(".jpg", "");
                    return {
                        fluredge,
                        floor,
                        url: `http://localhost:3001/uploads/duty/${name}?t=${Date.now()}`
                    };
                });

            res.json({ photos });
        });
    });

    // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ duty-—Ñ–æ—Ç–æ
    app.delete("/api/delete-duty-photo", (req, res) => {
        const { fluredge, floor } = req.body;

        if (!fluredge || !floor) {
            return res.status(400).json({ success: false, error: "–î–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã" });
        }

        const filePath = path.join(__dirname, "public", "uploads", "duty", `${fluredge}_${floor}.jpg`);

        fs.unlink(filePath, (err) => {
            if (err) {
                if (err.code === 'ENOENT') {
                    return res.status(404).json({ success: false, error: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
                }
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
                return res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            }

            res.json({ success: true });
        });
    });

    // üì∏ –§–æ—Ç–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞
    app.get("/api/student-duty-photo", (req, res) => {
        const userId = req.session.userId;
        if (!userId) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });

        db.query("SELECT floor, flooredge FROM db.students WHERE user_id = ?", [userId], (err, results) => {
            if (err) return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ë–î" });
            if (results.length === 0) return res.status(404).json({ error: "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

            const { floor, fluredge } = results[0];
            const imagePath = path.join(__dirname, "public", "uploads", "duty", `${fluredge}_${floor}.jpg`);

            if (!fs.existsSync(imagePath)) {
                return res.json({ image: null }); // –§–æ—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            }

            const imageUrl = `/uploads/duty/${fluredge}_${floor}.jpg`;
            res.json({ image: imageUrl });
        });
    });

    app.get('/api/users', (req, res) => {
        const sql = `
        SELECT u.idUsers, u.Login, u.role, s.name, s.last_name, s.patronymic, s.birth_date, s.phone, s.email, s.address, s.university, s.faculty, s.group_name, s.block, s.room, s.number_ticket, s.avatar, s.floor, s.flooredge
        FROM db.users u
        JOIN db.students s ON u.idUsers = s.user_id
    `;

        db.query(sql, (err, result) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö' });
            }
            res.json(result); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        });
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    app.post('/api/add-user', async (req, res) => {
        const { username, password, role, studentData } = req.body;
        const bcrypt = require('bcrypt');

        try {
            const hashedPassword = await bcrypt.hash(password, 10);

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const sqlUser = 'INSERT INTO db.users (Login, password, role) VALUES (?, ?, ?)';
            db.query(sqlUser, [username, hashedPassword, role], (err, result) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
                }

                const userId = result.insertId;

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
                const s = studentData;
                const safeNumber = (value) => (value === '' ? null : value);

                const params = [
                    userId,
                    s.name,
                    s.last_name,
                    s.patronymic,
                    s.birth_date === '' ? null : s.birth_date,
                    s.phone,
                    s.email,
                    s.address,
                    s.university,
                    s.faculty,
                    s.group_name,
                    safeNumber(s.block),
                    safeNumber(s.room),
                    safeNumber(s.number_ticket),
                    s.avatar,
                    safeNumber(s.floor),
                    s.flooredge
                ];

                const sqlStudent = `INSERT INTO db.students (user_id, name, last_name, patronymic, birth_date, phone, email, address, university, faculty, group_name, block, room, number_ticket, avatar, floor, flooredge) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

                db.query(sqlStudent, params, (err2, result2) => {
                    if (err2) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞:', err2);
                        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞' });
                    }

                    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã' });
                });
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    app.delete('/api/delete-user/:userId', (req, res) => {
        const userId = parseInt(req.params.userId, 10);
        console.log("–ü–æ–ª—É—á–µ–Ω userId –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", req.params.userId);

        if (isNaN(userId)) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", req.params.userId);
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        }

        console.log("–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:", userId);

        // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const sqlDeleteStudent = 'DELETE FROM db.students WHERE user_id = ?';
        db.query(sqlDeleteStudent, [userId], (err1, result1) => {
            if (err1) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞:', err1);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞' });
            }

            if (result1.affectedRows === 0) {
                console.warn("–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            }

            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const sqlDeleteUser = 'DELETE FROM db.users WHERE idUsers = ?';
            db.query(sqlDeleteUser, [userId], (err2, result2) => {
                if (err2) {
                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err2);
                    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
                }

                if (result2.affectedRows === 0) {
                    console.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                }

                console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
                res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });
            });
        });
    });

    app.put('/api/update-user/:id', (req, res) => {
        const userId = req.params.id;
        const { username, password, role, studentData } = req.body;

        const sqlUser = password
            ? 'UPDATE db.users SET Login = ?, Password = ?, role = ? WHERE idUsers = ?'
            : 'UPDATE db.users SET Login = ?, role = ? WHERE idUsers = ?';

        const userParams = password ? [username, password, role, userId] : [username, role, userId];

        db.query(sqlUser, userParams, (err) => {
            if (err) {
                console.error(err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏' });
            }

            const sqlStudent = `
            UPDATE db.students SET
                name = ?, last_name = ?, patronymic = ?, birth_date = ?, phone = ?, email = ?, address = ?,
                university = ?, faculty = ?, group_name = ?, block = ?, room = ?, number_ticket = ?,
                avatar = ?, floor = ?, flooredge = ?
            WHERE user_id = ?
        `;
            const studentValues = [
                studentData.name, studentData.last_name, studentData.patronymic, studentData.birth_date, studentData.phone,
                studentData.email, studentData.address, studentData.university, studentData.faculty, studentData.group_name,
                studentData.block, studentData.room, studentData.number_ticket, studentData.avatar, studentData.floor,
                studentData.flooredge, userId
            ];

            db.query(sqlStudent, studentValues, (err2) => {
                if (err2) {
                    console.error(err2);
                    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞' });
                }

                res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
            });
        });
    });

    // üìÇ –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî —Ö—Ä–∞–Ω–∏–º –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ uploads/news
    const newsStorage = multer.diskStorage({
        destination: (req, file, cb) => cb(null, "public/uploads/news"),
        filename: (req, file, cb) => {
            const ext = path.extname(file.originalname);
            cb(null, `news-${Date.now()}${ext}`);
        }
    });
    const uploadNews = multer({ storage: newsStorage });

    // üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∞—Ä—Ö–∏–≤)
    app.get('/api/news', (req, res) => {
        const sql = 'SELECT * FROM db.news ORDER BY created_at DESC';
        db.query(sql, (err, results) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            res.json(results);
        });
    });

    // ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    app.post('/api/add-news', uploadNews.single('image'), (req, res) => {
        const { title, content } = req.body;
        const imagePath = req.file ? `/uploads/news/${req.file.filename}` : null;

        const sql = 'INSERT INTO db.news (title, content, image) VALUES (?, ?, ?)';
        db.query(sql, [title, content, imagePath], (err, result) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞' });
        });
    });

    // ‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    app.delete('/api/news/:id', (req, res) => {
        const { id } = req.params;
        const getImageSql = 'SELECT image FROM db.news WHERE id = ?';
        const deleteSql = 'DELETE FROM db.news WHERE id = ?';

        db.query(getImageSql, [id], (err, results) => {
            if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            if (results.length > 0 && results[0].image) {
                const imagePath = path.join(__dirname, 'public', results[0].image);
                fs.unlink(imagePath, (unlinkErr) => {
                    if (unlinkErr && unlinkErr.code !== 'ENOENT') {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', unlinkErr);
                    }
                });
            }

            db.query(deleteSql, [id], (err2, result2) => {
                if (err2) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
                res.json({ message: '–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞' });
            });
        });
    });

    // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    app.get('/api/events', (req, res) => {
        const query = 'SELECT * FROM db.events ORDER BY created_at DESC';
        db.query(query, (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', err);
                return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
            }
            res.json(results);
        });
    });

    // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    app.post('/api/add-event', (req, res) => {
        const { title, description, date, time } = req.body;
        const query = 'INSERT INTO db.events (title, description, date, time) VALUES (?, ?, ?, ?)';

        db.query(query, [title, description, date, time], (err, result) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', err);
                return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
            }
            res.status(201).send('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        });
    });

    // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ ID
    app.delete('/api/events/:id', (req, res) => {
        const { id } = req.params;
        const query = 'DELETE FROM db.events WHERE id = ?';

        db.query(query, [id], (err, result) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', err);
                return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
            }
            res.send('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        });
    });

    // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    app.put('/api/events/:id', (req, res) => {
        const { id } = req.params;
        const { title, description, date, time } = req.body;
        const query = 'UPDATE db.events SET title = ?, description = ?, date = ?, time = ? WHERE id = ?';

        db.query(query, [title, description, date, time, id], (err, result) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', err);
                return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
            }
            res.send('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        });
    });

    // üöÄ
    app.listen(3001, () => {
        console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:3001");
    });
